---
title: "Autoapprentissage et données spatiales"
author: "Prabin_ghimire"
format: html
editor: visual
---

## Assignment: Autoapprentissage et données spatiales.

**:# Loading all the necessary libraries.**

```{r}
library(tidyverse)#for data manipulation
library(caret) #for training, tuning, and evaluating learning models.
library(randomForest)#for creating and using random forest regression models.
library(ggmap)# for visualizing the data
library(sp)#provides tools for working with spatial data in R.
library(gstat)#library for geostatistics, which involves analyzing and modeling spatial data
library(osmdata)#access and retrieve data from OpenStreetMap (OSM),
library(raster)#library provides tools for working with raster data, which represent  spatial information


```

**#1.Creating a yield prediction model:**

```{r}
# Loading the data
banane <- read_csv("banane.csv")# This line reads the data from a CSV file named "banane.csv" and stores it in a data frame named "banane".

# Spliting  the data into training(70%) and testing sets(30%)
set.seed(123)#sets a random seed to ensure reproducibility of the results when splitting the data.
id_tr <- createDataPartition(banane$yield, p = 0.7, list = FALSE)#This line creates a random partition of the data in the "banane" data frame. 
banane_tr <- banane[id_tr, ]#This line subsets the "banane" data frame to keep only the rows with indices in "id_tr" (the training data).
banane_te <- banane[-id_tr, ]

# Creating  a self-learning model with a random forest.
#This line creates a random forest model named "ml_mod" using the train function from the caret library. 
ml_mod <- train(yield ~ lon + lat + degree_days + cumul_precip + sdi,
                data = banane_tr,
                method = "rf")

# Make predictions on the test set
#This line uses the trained model "ml_mod" to predict yield values for the unseen testing data in "banane_te" and stores the predictions in a variable named "predictions"
predictions <- predict(ml_mod, newdata = banane_te)

# Evaluate the model's performance
#Evaluates the performance of the model on the test data  and stores the result in "accuracy". 
accuracy <- postResample(predictions, banane_te$yield)
print(accuracy)


```

Interpretation:

The model seems to have a moderate performance based on RMSE,Rsquared and MAE metrics. An RMSE of 3.5 suggests that the model's predictions deviate from the actual values by an average of 3.5 units on yield. The R-squared value of 0.72 indicates that the model explains around 72% of the variance in the actual yield data. An MAE of 2.84 suggests that the average difference between predicted and actual yields is around 2.84 units.

```         
```

**#2.Predicting future production:**

```{r}

# Calculating total production for all sites
#calculates the total yield for all sites before any changes are applied. It sums the yield values in the "yield" column of the "banane" data frame and multiplies it by 6000
initial_production <- sum(banane$yield) * 6000
#Multiply the meteorological variables by the given percentages
#This line increases the values in the "degree_days"  by 1.15.
banane$degree_days <- banane$degree_days * 1.15
#This line increases the values in the "cumul_precip" by 1.08.
banane$cumul_precip <- banane$cumul_precip * 1.08
#This line decreases the values in the "sdi" by 0.88.
banane$sdi <- banane$sdi * 0.88
 
# Predicting  yields
#This line uses the previously trained model "ml_mod" to predict yield values for the data in "banane" with the simulated changes. 
predicted_yield <- predict(ml_mod, newdata = banane)

# Calculating the projected total production in Mg
# calculates the total yield after the simulated changes using the predicted yield values and the same conversion factor (6000) used earlier.
projected_production <- sum(predicted_yield) * 6000

# Determine if there's an increase or decrease in production
if (projected_production > initial_production) {
  print("Increase in production.")
} else if (projected_production < initial_production) {
  print("Decrease in production.")
} else {
  print("Production would remain the same.")
}
```

Interpretation:

Since the output is "Increase in production.", the total yield predicted after the simulated changes (increased degree days and precipitation, decreased soil drainage) is likely higher than the initial total yield.

**#3.Generating the map.**

```{r}
# Convert banane to a data frame
banane_df <- as.data.frame(banane)

# Specify the coordinate box for the map
#defining the bounding box for the map based on the minimum and maximum longitude and latitude values in the "banane" data frame.
lon_min <- min(banane$lon)
lon_max <- max(banane$lon)
lat_min <- min(banane$lat)
lat_max <- max(banane$lat)
bbox <- c(left = lon_min, bottom = lat_min, right = lon_max, top = lat_max)

# Registering API key with ggmap for Stadia Maps
#This line registers an API key with the ggmap library for accessing Stadia Maps (a basemap provider). 
register_stadiamaps("9b8065db-9d21-4ed1-a6b0-4680bb00a631", write = TRUE)

# Getting the Stamen map using ggmap
# Retrieves a basemap from Stadia Maps using the specified bounding box, zoom level (6), and map type ("stamen_toner_lite").
map <- get_stadiamap(bbox, zoom = 6, maptype = "stamen_toner_lite")


```

```{r}
# Defining the grid of points for prediction
#The following lines define a grid of points using seq to create sequences for longitude and latitude values. 
lon_grid <- seq(min(banane$lon), max(banane$lon), length.out = 20)
lat_grid <- seq(min(banane$lat), max(banane$lat), length.out = 20)
grid_points <- expand.grid(lon = lon_grid, lat = lat_grid)
str(banane)

# Convert 'banane' to SpatialPointsDataFrame
#These lines convert the "banane" data frame into a SpatialPointsDataFrame object named "stations". A SpatialPointsDataFrame is a data structure specifically designed for spatial data in R. It stores the locations (points) along with  cumulative precipitation for each point.
coordinates(banane) <- c("lon", "lat")
proj4string(banane) <- CRS("+proj=longlat +datum=WGS84")

# Create a SpatialPointsDataFrame for 'stations'
stations <- banane

# Create a SpatialPointsDataFrame for grid points
grid_points_sp <- SpatialPointsDataFrame(coords = grid_points,
                                         data = data.frame(lon = rep(lon_grid, each = length(lat_grid)),
                                                           lat = rep(lat_grid, length(lon_grid))))
```

**\# 4: Performing inverse distance weighting (IDW) Interpolation**

```{r}
# Perform inverse distance weighting (IDW) interpolation
# Performs Inverse Distance Weighting (IDW) interpolation using the gstat library. #The code specifies that we're predicting the value of "cumul_precip" (cumulative precipitation) based on a constant (1, which acts as an intercept). "locations" refers to the existing stations (data points) in "banane", and "newdata" specifies that the predictions will be made at the same locations (stations) for now.
idw_model <- gstat::idw(formula = cumul_precip ~ 1, locations = stations, newdata = stations)

# Extract predicted values
predicted <- idw_model$var1.pred

# Extract observed values
observed <- banane$cumul_precip

# Calculate performance metrics
#This calculates  performance metrics (Mean Squared Error, Root Mean Squared Error, Mean Absolute Error, R-squared) to evaluate how well the IDW model predictions match the observed values.
mse <- mean((observed - predicted)^2)
rmse <- sqrt(mse)
mae <- mean(abs(observed - predicted))
r_squared <- cor(observed, predicted)^2

# Print performance metrics
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("R-squared (R²):", r_squared, "\n")

# Check the lengths of observed and predicted data
#checks the lengths of the observed and predicted data sets to ensure they have the same number of values.
cat("Length of observed data:", length(observed), "\n")
cat("Length of predicted data:", length(predicted), "\n")


#Create a data frame for plotting
#This line creates a new data frame named "plot_data" containing the longitude, latitude, and cumulative precipitation values for all stations
plot_data <- data.frame(lon = banane$lon, lat = banane$lat, cumul_precip = banane$cumul_precip)

# Plotting the map with cumulative precipitation
ggmap(map) +
  geom_point(data = plot_data, aes(x = lon, y = lat, color = cumul_precip), size = 2) +
  scale_color_gradient(low = "blue", high = "red", name = "Cumulative Precipitation") +
  labs(title ="Map of Cumulative Precipitation")
```

Interpretation:

The high R-squared value (0.98) suggests that the IDW model performs very well in capturing the spatial patterns of cumulative precipitation based on the existing stations. The relatively low RMSE (23.3) and MAE (3.4) indicate that the average prediction errors are also small. This means the predicted precipitation values at the grid points are generally close to the observed values at the stations.

A color gradient ranging from blue (low value) to red value (high value) to represent the variation in cumulative precipitation across the station.

**#5.Creating a raster map.**

```{r}
# Create a raster grid

lon_grid <- seq(min(banane$lon), max(banane$lon), length.out = 20)
lat_grid <- seq(min(banane$lat), max(banane$lat), length.out = 20)

# Create grid points
grid_points_sp <- expand.grid(lon = lon_grid, lat = lat_grid)
coordinates(grid_points_sp) <- c("lon", "lat")
proj4string(grid_points_sp) <- CRS("+proj=longlat +datum=WGS84")

# Set the CRS of grid_points_sp to match the CRS of stations
#This line ensures that the grid points ("grid_points_sp") have the same coordinate reference system (CRS) as the existing stations data ("stations"). 
proj4string(grid_points_sp) <- proj4string(stations)

# Perform IDW interpolation
idw_model <- gstat::idw(formula = cumul_precip ~ 1, locations = stations, newdata = grid_points_sp)

# Extract predicted values
predicted <- idw_model$var1.pred

# Define the raster grid using lon_grid and lat_grid
raster_grid <- expand.grid(lon = lon_grid, lat = lat_grid)
# Convert to raster
raster_prediction <- rasterFromXYZ(data.frame(lon = raster_grid$lon, lat = raster_grid$lat, pred_cumm_precip = predicted))
# Plot the raster map
plot(raster_prediction, col = terrain.colors(100), main = "Raster Map of Predicted Cumulative Precipitation")

```

Interpretation:

Raster map where each cell represents a specific location within the defined grid, and the gradient color of the cell ,green (low) to yellow (high) reflects the predicted cumulative precipitation value at that location based on the IDW interpolation.
